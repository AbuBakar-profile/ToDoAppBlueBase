{"version":3,"sources":["assets/no-tasks-dark.png","assets/no-tasks-light.png","configs.ts","src/components/ToDoAppIcon/ToDoAppIcon.tsx","src/components/ToDoAppIcon/index.tsx","src/components/TaskCreateButton/TaskCreateButton.tsx","src/components/TaskList/TasksCollectionQuery.graphql.ts","src/components/TaskDeleteButton/DeleteTaskMutation.graphql.ts","src/components/TaskDeleteButton/TaskDeleteButton.tsx","src/components/TaskDeleteButton/index.ts","src/routes.tsx","src/components/EditTaskForm/UpdateTaskMutation.graphql.ts","src/components/EditTaskForm/EditTaskForm.tsx","src/components/EditTaskForm/index.ts","src/screens/EditTaskScreen/EditTaskScreen.tsx","src/components/TaskListEmptyState/TaskListEmptyState.tsx","src/components/TaskListEmptyState/index.ts","src/components/TaskListItem/TaskListItem.tsx","src/components/TaskList/TaskList.tsx","src/components/TaskList/index.ts","src/screens/PendingTasksScreen/PendingTasksScreen.tsx","src/screens/PendingTasksScreen/index.ts","src/components/CreateTaskForm/CreateTaskMutation.graphql.ts","src/components/CreateTaskForm/CreateTaskForm.tsx","src/components/CreateTaskForm/index.ts","src/screens/CreateTaskScreen/CreateTaskScreen.tsx","src/screens/CreateTaskScreen/index.ts","src/screens/CompletedTasksScreen/CompletedTasksScreen.tsx","src/screens/CompletedTasksScreen/index.ts","src/screens/index.ts","src/lang/ur.ts","src/lang/index.ts","src/index.ts","plugins.ts","App.tsx"],"names":["module","exports","configs","uri","headers","apiKey","en","fr","ur","light","components","ToDoAppIcon","root","backgroundColor","props","size","theme","useTheme","styles","useStyles","iconColor","color","palette","error","contrastText","main","borderRadius","shape","alignItems","justifyContent","height","width","style","type","name","defaultProps","TaskCreateButton","_props","navigate","useNavigation","onPress","useCallback","text","secondary","TasksCollectionQuery","gql","TasksCollectionQueryUpdateQueryFn","previousResult","fetchMoreResult","prevEdges","tasksCollection","edges","newEdges","pageInfo","endCursor","hasNextPage","hasPreviousPage","startCursor","DeleteTaskMutation","TaskDeleteButton","id","onCompleted","useMutation","refetchQueries","awaitRefetchQueries","variables","deleteTask","loading","disabled","displayName","routes","screen","path","exact","options","title","route","headerRight","params","taskId","navigator","headerMode","tabBarIcon","tabBarOptions","showIcon","tabStyle","flexDirection","UpdateTaskMutation","JsonGraphqlForm","getComponent","EditTaskForm","onSuccess","mapQueryDataToInitialValues","data","node","mapFormValuesToMutationVariables","task","description","completed","queryVariables","filter","query","mutation","schema","validateOnBlur","validateOnChange","fields","autoFocus","label","required","EditTaskScreen","getParam","TaskListEmptyState","__","useIntl","goToCreate","imageSource","imageProps","resizeMode","actionTitle","actionOnPress","actionProps","variant","PlaceholderListItem","TaskListItem","avatar","push","Item","left","checked","GraphqlList","mapQueryResultToConnection","result","renderItem","item","renderDivider","inset","TaskList","pagination","itemsPerPage","updateQueryInfinitePagination","ItemSeparatorComponent","ListEmptyComponent","queryOptions","PendingTasksScreen","CreateTaskMutation","CreateTaskForm","tasks","fullWidth","CreateTaskScreen","CompletedTasksScreen","screens","messages","lang","createPlugin","key","assets","NoTasks_dark","require","NoTasks_light","filters","icon","component","indexRoute","plugins","BlueBasePluginApollo","BlueBasePluginJsonGraphqlComponents","BlueBasePluginJsonSchemaComponents","BlueBasePluginLauncher","BlueBasePluginMaterialUI","BlueBasePluginReactRouter","BlueBasePluginResponsiveGrid","MaterialCommunityIcons","BlueBasePluginSettingsApp","Plugin","BlueBasePlaceholder","App"],"mappings":"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","file":"static/js/app.e062d2de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-tasks-dark.47f99c42.png\";","module.exports = __webpack_public_path__ + \"static/media/no-tasks-light.ba135df4.png\";","export const configs = {\r\n\r\n\t// Apollo Graphql Configs\r\n\t'plugin.apollo.httpLinkOptions': {\r\n\t\turi: \"https://lgonnzutejauqwnexlge.supabase.co\" + '/graphql/v1',\r\n\t\theaders: {\r\n\t\t\tapiKey: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxnb25uenV0ZWphdXF3bmV4bGdlIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NjQyNTg3NzIsImV4cCI6MTk3OTgzNDc3Mn0.gMckEYd-VAXMHeupDZzth3TV3ErhgTxuxDnZKAR0PLk\"\r\n\t\t}\r\n\t},\r\n\t'locale.options': {\r\n\t\ten: 'English',\r\n\t\tfr: 'French',\r\n\t\tur: 'اُردُو',\r\n\t},\r\n\t'theme.overrides': {\r\n\t\tlight: {\r\n\t\t\tcomponents: {\r\n\t\t\t\tToDoAppIcon: {\r\n\t\t\t\t\troot: {\r\n\t\t\t\t\t\tbackgroundColor: '#6750A4',\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t// 'tasks.itemsPerPage': 5,\r\n};","import { DynamicIcon, View } from '@bluebase/components';\r\nimport { useStyles, useTheme } from '@bluebase/core';\r\nimport React from 'react';\r\nimport { TextStyle, ViewStyle } from 'react-native';\r\n\r\nexport interface ToDoAppIconStyles {\r\n\ticonColor: { color: TextStyle['color'] };\r\n\troot: ViewStyle;\r\n}\r\n\r\nexport interface ToDoAppIconProps {\r\n\tsize: number;\r\n\tstyles?: Partial<ToDoAppIconStyles>;\r\n}\r\n\r\nexport const ToDoAppIcon = (props: ToDoAppIconProps) => {\r\n\tconst { size } = props;\r\n\tconst { theme } = useTheme();\r\n\r\n\tconst styles: ToDoAppIconStyles = useStyles('ToDoAppIcon', props, {\r\n\t\ticonColor: {\r\n\t\t\tcolor: theme.palette.error.contrastText,\r\n\t\t},\r\n\t\troot: {\r\n\t\t\tbackgroundColor: theme.palette.error.main,\r\n\t\t\tborderRadius: theme.shape.borderRadius * 3,\r\n\t\t\talignItems: 'center',\r\n\t\t\tjustifyContent: 'center',\r\n\t\t\theight: size,\r\n\t\t\twidth: size,\r\n\t\t},\r\n\t});\r\n\r\n\treturn (\r\n\t\t<View style={styles.root}>\r\n\t\t\t<DynamicIcon\r\n\t\t\t\ttype=\"icon\"\r\n\t\t\t\tname=\"checkbox-multiple-marked-outline\"\r\n\t\t\t\tcolor={styles.iconColor.color}\r\n\t\t\t\tsize={size * 0.75}\r\n\t\t\t/>\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nToDoAppIcon.defaultProps = {\r\n\tsize: 100,\r\n};\r\n","export * from './ToDoAppIcon';\r\n\r\nimport { ToDoAppIcon } from './ToDoAppIcon';\r\nexport default ToDoAppIcon;","import { IconButton } from '@bluebase/components';\r\nimport { useNavigation, useTheme } from '@bluebase/core';\r\nimport React, { useCallback } from 'react';\r\n\r\nexport interface TaskCreateButtonProps {}\r\n\r\nexport const TaskCreateButton = (_props: TaskCreateButtonProps) => {\r\n\tconst { theme } = useTheme();\r\n\tconst { navigate } = useNavigation();\r\n\r\n\tconst onPress = useCallback(() => {\r\n\t\tnavigate('CreateTask');\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<IconButton\r\n\t\t\tname=\"plus\"\r\n\t\t\tonPress={onPress}\r\n\t\t\tcolor={theme.palette.text.secondary}\r\n\t\t/>\r\n\t);\r\n};","import { FetchMoreOptions } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\n\r\nimport { TasksCollectionQueryQuery } from '../../graphql-types';\r\n\r\nexport const TasksCollectionQuery = gql`\r\n\tquery TasksCollectionQuery(\r\n\t\t$filter: tasksFilter\r\n\t\t$first: Int\r\n\t\t# $last: Int\r\n\t\t# $before: Cursor\r\n\t\t$after: Cursor\r\n\t) {\r\n\t\ttasksCollection(\r\n\t\t\tfilter: $filter\r\n\t\t\tfirst: $first\r\n\t\t\t# last: $last\r\n\t\t\t# before: $before\r\n\t\t\tafter: $after\r\n\t\t) {\r\n\t\t\tedges {\r\n\t      cursor\r\n\t\t\t\tnode {\r\n\t\t\t\t\tid\r\n\t\t\t\t\ttitle\r\n\t\t\t\t\tcompleted\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpageInfo {\r\n\t\t\t\tendCursor\r\n\t\t\t\thasNextPage\r\n\t\t\t\thasPreviousPage\r\n\t\t\t\tstartCursor\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const TasksCollectionQueryUpdateQueryFn: FetchMoreOptions<TasksCollectionQueryQuery>['updateQuery'] = (\r\n\tpreviousResult,\r\n\t{ fetchMoreResult }\r\n) => {\r\n\tif (!fetchMoreResult) {\r\n\t\treturn previousResult;\r\n\t}\r\n\r\n\tconst prevEdges = previousResult.tasksCollection?.edges || [];\r\n\tconst newEdges = fetchMoreResult.tasksCollection?.edges || [];\r\n\r\n\treturn {\r\n\t\t// Put the new items at the end of the list and update `pageInfo`\r\n\t\t// so we have the new `endCursor` and `hasNextPage` values\r\n\t\ttasksCollection: {\r\n\t\t\t...previousResult.tasksCollection,\r\n\r\n\t\t\tedges: [...prevEdges, ...newEdges],\r\n\r\n\t\t\tpageInfo: {\r\n\t\t\t\t...previousResult.tasksCollection?.pageInfo,\r\n\r\n\t\t\t\tendCursor: fetchMoreResult.tasksCollection?.pageInfo?.endCursor,\r\n\t\t\t\thasNextPage: !!fetchMoreResult.tasksCollection?.pageInfo?.hasNextPage,\r\n\t\t\t\thasPreviousPage: !!fetchMoreResult.tasksCollection?.pageInfo?.hasPreviousPage,\r\n\t\t\t\tstartCursor: fetchMoreResult.tasksCollection?.pageInfo?.startCursor,\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n};","import gql from 'graphql-tag';\r\n\r\nexport const DeleteTaskMutation = gql`\r\n\tmutation DeleteTaskMutation($id: UUID!) {\r\n\t\tdeleteFromtasksCollection(filter: { id: { eq: $id } }) {\r\n\t\t\trecords {\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;","import { useMutation } from '@apollo/client';\r\nimport { IconButton } from '@bluebase/components';\r\nimport { useNavigation, useTheme } from '@bluebase/core';\r\nimport React, { useCallback } from 'react';\r\n\r\nimport { DeleteTaskMutationMutation } from '../../graphql-types';\r\nimport { TasksCollectionQuery } from '../TaskList/TasksCollectionQuery.graphql';\r\nimport { DeleteTaskMutation } from './DeleteTaskMutation.graphql';\r\n\r\nexport interface TaskDeleteButtonProps {\r\n\tid: string\r\n}\r\n\r\nexport const TaskDeleteButton = (props: TaskDeleteButtonProps) => {\r\n\tconst { id } = props;\r\n\tconst { theme } = useTheme();\r\n\tconst { navigate } = useNavigation();\r\n\r\n\tconst onCompleted = useCallback(() => {\r\n\t\tnavigate('TasksApp');\r\n\t}, []);\r\n\r\n\tconst [deleteTask, { loading }] = useMutation<DeleteTaskMutationMutation>(DeleteTaskMutation, {\r\n\t\tonCompleted,\r\n\t\trefetchQueries: [TasksCollectionQuery],\r\n\t\tawaitRefetchQueries: true,\r\n\t\tvariables: { id }\r\n\t});\r\n\r\n\treturn (\r\n\t\t<IconButton\r\n\t\t\tname=\"delete\"\r\n\t\t\tonPress={deleteTask}\r\n\t\t\tcolor={theme.palette.text.secondary}\r\n\t\t\tdisabled={loading}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nTaskDeleteButton.displayName = 'TaskDeleteButton';","export * from './TaskDeleteButton';\r\n\r\nimport { TaskDeleteButton } from './TaskDeleteButton';\r\nexport default TaskDeleteButton;","import { Icon } from \"@bluebase/components\";\r\nimport { TaskCreateButton } from './components/TaskCreateButton';\r\nimport { CreateTaskScreen } from './screens/CreateTaskScreen';\r\nimport { TaskDeleteButton } from \"./components/TaskDeleteButton\";\r\n\r\nexport const routes = [\r\n    // {\r\n    //     exact: true,\r\n    //     name: 'CreateTask',\r\n    //     path: 'create',\r\n    //     screen: 'CreateTasksScreen',\r\n    //     options: {\r\n    //     title: 'Create Task',\r\n    //     tabBarIcon: ({ color }) => (\r\n    //     <Icon name=\"checkbox-multiple-marked\" color={color} />\r\n    //     ),\r\n    //     },\r\n    // },\r\n    {\r\n        name: 'CreateTask',\r\n        screen: 'CreateTaskScreen',\r\n        path: 'create',\r\n        exact: true,\r\n    \r\n        options: {\r\n            title: 'Create Task',\r\n        },\r\n    },\r\n    // {\r\n    //     name: 'EditTask',\r\n    //     screen: 'EditTaskScreen',\r\n    //     path: 't/:taskId',\r\n    //     exact: true,\r\n    \r\n    //     options: {\r\n    //         title: 'Edit Task',\r\n    //     },\r\n    // },\r\n    {\r\n        name: 'EditTask',\r\n        screen: 'EditTaskScreen',\r\n        path: 't/:taskId',\r\n        exact: true,\r\n        \r\n        options: ({ route }: any) => ({\r\n            title: 'Edit Task',\r\n            headerRight: () => <TaskDeleteButton id={route.params.taskId} />\r\n        }),\r\n    },\r\n    {\r\n        name: 'TasksApp',\r\n        path: '',\r\n        exact: false,\r\n        \r\n        options: {\r\n            title: 'My Tasks',\r\n            headerRight: () => <TaskCreateButton />\r\n        },\r\n        \r\n        navigator: {\r\n            headerMode: 'none',\r\n            type: 'tab',\r\n        \r\n            routes: [{\r\n                exact: true,\r\n                name: 'PendingTask',\r\n                path: 'pending',\r\n                screen: 'PendingTasksScreen',\r\n    \r\n                options: {\r\n                    title: 'Pending',\r\n                    tabBarIcon: ({ color }) => <Icon name=\"checkbox-multiple-blank-outline\" color={color} />,\r\n                },\r\n            }, {\r\n                exact: true,\r\n                name: 'CompletedTasks',\r\n                path: 'completed',\r\n                screen: 'CompletedTasksScreen',\r\n    \r\n                options: {\r\n                    title: 'Completed',\r\n                    tabBarIcon: ({ color }) => <Icon name=\"checkbox-multiple-marked\" color={color} />,\r\n                },\r\n            }],\r\n        \r\n            tabBarOptions: {\r\n                showIcon: true,\r\n                tabStyle: {\r\n                    flexDirection: 'row',\r\n                },\r\n            },\r\n        },\r\n    }\r\n];","import gql from 'graphql-tag';\r\n\r\nexport const UpdateTaskMutation = gql`\r\n\tmutation UpdateTaskMutation(\r\n\t\t$id: UUID!\r\n\t\t$title: String\r\n\t\t$description: String\r\n\t\t$completed: Boolean\r\n\t) {\r\n\t\tupdatetasksCollection(\r\n\t\t\tfilter: { id: { eq: $id } }\r\n\t\t\tset: {\r\n\t\t\t\ttitle: $title,\r\n\t\t\t\tdescription: $description,\r\n\t\t\t\tcompleted: $completed\r\n\t\t\t}\r\n\t\t) {\r\n\t\t\taffectedCount\r\n\t\t\trecords {\r\n\t\t\t\tid\r\n\t\t\t\ttitle\r\n\t\t\t\tdescription\r\n\t\t\t\tcompleted\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n","import { getComponent, useNavigation } from '@bluebase/core';\r\nimport { JsonGraphqlFormProps } from '@bluebase/plugin-json-graphql-components';\r\nimport React, { useCallback } from 'react';\r\n\r\nimport {\r\n\tTasksCollectionQueryQuery,\r\n\tTasksCollectionQueryQueryVariables,\r\n\tTasksInsertInput,\r\n\tUpdateTaskMutationMutationVariables\r\n} from '../../graphql-types';\r\nimport { TasksCollectionQuery } from '../TaskList/TasksCollectionQuery.graphql';\r\nimport { UpdateTaskMutation } from './UpdateTaskMutation.graphql';\r\n\r\nconst JsonGraphqlForm = getComponent<JsonGraphqlFormProps<any>>('JsonGraphqlForm');\r\n\r\nexport interface EditTaskFormProps {\r\n\tid: string;\r\n}\r\n\r\nexport const EditTaskForm = (props: EditTaskFormProps) => {\r\n\tconst { navigate } = useNavigation();\r\n\tconst { id } = props;\r\n\r\n\tconst onSuccess = useCallback(() => {\r\n\t\tnavigate('TasksApp');\r\n\t}, []);\r\n\r\n\tconst mapQueryDataToInitialValues = useCallback(\r\n\t\t(data: TasksCollectionQueryQuery) => {\r\n\t\t\treturn data?.tasksCollection?.edges[0]?.node;\r\n\t\t}, []);\r\n\r\n\tconst mapFormValuesToMutationVariables = useCallback(\r\n\t\t(task: TasksInsertInput): UpdateTaskMutationMutationVariables => {\r\n\t\t\treturn {\r\n\t\t\t\tid: task.id,\r\n\t\t\t\ttitle: task.title,\r\n\t\t\t\tdescription: task.description,\r\n\t\t\t\tcompleted: task.completed\r\n\t\t\t};\r\n\t\t}, []);\r\n\r\n\tconst queryVariables: TasksCollectionQueryQueryVariables = {\r\n\t\tfilter: {\r\n\t\t\tid: { 'eq': id }\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<JsonGraphqlForm\r\n\t\t\tquery={{\r\n\t\t\t\tquery: TasksCollectionQuery,\r\n\t\t\t\tvariables: queryVariables\r\n\t\t\t}}\r\n\t\t\tmutation={{\r\n\t\t\t\tmutation: UpdateTaskMutation,\r\n\t\t\t\trefetchQueries: [TasksCollectionQuery],\r\n\t\t\t\tawaitRefetchQueries: true\r\n\t\t\t}}\r\n\t\t\tonSuccess={onSuccess}\r\n\t\t\tmapFormValuesToMutationVariables={mapFormValuesToMutationVariables}\r\n\t\t\tmapQueryDataToInitialValues={mapQueryDataToInitialValues}\r\n\t\t\t{...props}\r\n\t\t\tschema={{\r\n\t\t\t\tvalidateOnBlur: false,\r\n\t\t\t\tvalidateOnChange: false,\r\n\r\n\t\t\t\tfields: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tautoFocus: true,\r\n\t\t\t\t\t\tlabel: 'Title',\r\n\t\t\t\t\t\tname: 'title',\r\n\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Description',\r\n\t\t\t\t\t\tname: 'description',\r\n\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Completed',\r\n\t\t\t\t\t\tname: 'completed',\r\n\t\t\t\t\t\ttype: 'checkbox',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'status',\r\n\t\t\t\t\t\ttype: 'status',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'submit',\r\n\t\t\t\t\t\ttitle: 'Update Task',\r\n\t\t\t\t\t\ttype: 'submit',\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nEditTaskForm.displayName = 'EditTaskForm';","export * from './EditTaskForm';\r\n\r\nimport { EditTaskForm } from './EditTaskForm';\r\nexport default EditTaskForm;","import { useNavigation } from '@bluebase/core';\r\nimport React from 'react';\r\n\r\nimport EditTaskForm from '../../components/EditTaskForm';\r\n\r\nexport const EditTaskScreen = () => {\r\n\tconst { getParam } = useNavigation();\r\n\tconst taskId = getParam('taskId', null);\r\n\r\n\treturn (\r\n\t\t<EditTaskForm id={taskId} />\r\n\t);\r\n};\r\n\r\nEditTaskScreen.displayName = 'EditTaskScreen';","import { ComponentState, ComponentStateProps } from '@bluebase/components';\r\nimport { useIntl, useNavigation } from '@bluebase/core';\r\nimport React, { useCallback } from 'react';\r\n\r\nexport interface TaskListEmptyStateProps extends ComponentStateProps {}\r\n\r\nexport const TaskListEmptyState = (props: TaskListEmptyStateProps) => {\r\n\tconst { __ } = useIntl();\r\n\tconst { navigate } = useNavigation();\r\n\r\n\tconst goToCreate = useCallback(() => navigate('CreateTask'), []);\r\n\r\n\treturn (\r\n\t\t// <ComponentState\r\n\t\t// \ttitle={__('No tasks')}\r\n\t\t// \tdescription={__('Start by creating a new task')}\r\n\t\t// \tactionTitle={__('Create Task')}\r\n\t\t// \timageProps={{ resizeMode: 'contain' }}\r\n\t\t// \tactionOnPress={goToCreate}\r\n\t\t// \tactionProps={{ size: 'small', color: 'success', variant: 'outlined' }}\r\n\t\t// \t{...props}\r\n\t\t// />\r\n\t\t<ComponentState\r\n\t\t\timageSource=\"NoTasks\"\r\n\t\t\ttitle={__('No tasks')}\r\n\t\t\timageProps={{ resizeMode: 'contain' }}\r\n\t\t\tdescription={__('Start by creating a new task')}\r\n\t\t\tactionTitle={__('Create Task')}\r\n\t\t\tactionOnPress={goToCreate}\r\n\t\t\tactionProps={{ size: 'small', color: 'success', variant: 'outlined' }}\r\n\t\t\t{...props}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nTaskListEmptyState.displayName = 'TaskListEmptyState';\r\n","export * from './TaskListEmptyState';\r\n\r\nimport { TaskListEmptyState } from './TaskListEmptyState';\r\nexport default TaskListEmptyState;","import { Checkbox, List } from '@bluebase/components';\r\nimport { getComponent, useNavigation } from '@bluebase/core';\r\nimport { PlaceholderListItemProps } from '@bluebase/plugin-rn-placeholder';\r\nimport React, { useCallback } from 'react';\r\n\r\nimport { Tasks } from '../../graphql-types';\r\n\r\nconst PlaceholderListItem = getComponent<PlaceholderListItemProps>('PlaceholderListItem');\r\n\r\nexport interface TaskListItemProps extends Tasks {\r\n\tloading?: boolean;\r\n}\r\n\r\nexport const TaskListItem = (props: TaskListItemProps) => {\r\n\tconst {\r\n\t\tid,\r\n\t\ttitle,\r\n\t\tdescription,\r\n\t\tcompleted,\r\n\t\tloading,\r\n\t} = props;\r\n\r\n\tif (loading === true) {\r\n\t\treturn <PlaceholderListItem avatar description variant=\"icon\" />;\r\n\t}\r\n\r\n\tconst { push } = useNavigation();\r\n\r\n\tconst onPress = useCallback(() => {\r\n\t\tpush('EditTask', { taskId: id });\r\n\t}, [id]);\r\n\r\n\treturn (\r\n\t\t<List.Item\r\n\t\t\ttitle={title}\r\n\t\t\tdescription={description}\r\n\t\t\tleft={<Checkbox checked={!!completed} disabled />}\r\n\t\t\tonPress={onPress}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nTaskListItem.defaultProps = {};\r\nTaskListItem.displayName = 'TaskListItem';","import { QueryResult } from '@apollo/client';\r\nimport { Divider } from '@bluebase/components';\r\nimport { getComponent, useConfig } from '@bluebase/core';\r\nimport { GraphqlConnection, GraphqlListProps } from '@bluebase/plugin-json-graphql-components';\r\nimport React from 'react';\r\nimport { ListRenderItemInfo } from 'react-native';\r\n\r\nimport { Tasks, TasksCollectionQueryQuery, TasksCollectionQueryQueryVariables } from '../../graphql-types';\r\nimport TaskListEmptyState from '../TaskListEmptyState';\r\nimport { TaskListItem, TaskListItemProps } from '../TaskListItem';\r\nimport { TasksCollectionQuery, TasksCollectionQueryUpdateQueryFn } from './TasksCollectionQuery.graphql';\r\n\r\nconst GraphqlList = getComponent<GraphqlListProps<TaskListItemProps, TasksCollectionQueryQuery>>('GraphqlList');\r\n\r\nfunction mapQueryResultToConnection(result: QueryResult<TasksCollectionQueryQuery>) {\r\n\treturn result.data?.tasksCollection as GraphqlConnection<Tasks>;\r\n}\r\n\r\nfunction renderItem({ item }: ListRenderItemInfo<TaskListItemProps>) {\r\n\treturn <TaskListItem {...item} />;\r\n}\r\n\r\nconst renderDivider = () => <Divider inset />;\r\n\r\nexport interface TaskListProps {\r\n\tcompleted: boolean;\r\n}\r\n\r\nexport const TaskList = (props: TaskListProps) => {\r\n\tconst { completed } = props;\r\n\tconst itemsPerPage = 10;\r\n\t// const [itemsPerPage] = useConfig('tasks.itemsPerPage');\r\n\r\n\tconst variables: TasksCollectionQueryQueryVariables = {\r\n\t\tfilter: {\r\n\t\t\tcompleted: { 'eq': completed }\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<GraphqlList\r\n\t\t\tkey=\"task-list\"\r\n\t\t\tpagination=\"infinite\"\r\n\t\t\titemsPerPage={itemsPerPage}\r\n\t\t\tquery={TasksCollectionQuery}\r\n\t\t\tupdateQueryInfinitePagination={TasksCollectionQueryUpdateQueryFn}\r\n\t\t\tmapQueryResultToConnection={mapQueryResultToConnection}\r\n\t\t\trenderItem={renderItem}\r\n\t\t\tItemSeparatorComponent={renderDivider}\r\n\t\t\tListEmptyComponent={TaskListEmptyState}\r\n\t\t\tqueryOptions={{\r\n\t\t\t\tvariables\r\n\t\t\t}}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nTaskList.displayName = 'TaskList';","export * from './TaskList';\r\n\r\nimport { TaskList } from './TaskList';\r\nexport default TaskList;","import React from 'react';\r\n\r\nimport { TaskList } from '../../components/TaskList';\r\n\r\nexport const PendingTasksScreen = () => {\r\n\treturn (\r\n\t\t<TaskList completed={false} />\r\n\t);\r\n};\r\n\r\nPendingTasksScreen.displayName = 'PendingTasksScreen';","export * from './PendingTasksScreen';\r\n\r\nimport { PendingTasksScreen } from './PendingTasksScreen';\r\nexport default PendingTasksScreen;","import gql from 'graphql-tag';\r\n\r\nexport const CreateTaskMutation = gql`\r\n\tmutation CreateTaskMutation ($tasks: [tasksInsertInput!]!){\r\n\t\tinsertIntotasksCollection(objects: $tasks) {\r\n\t\t\trecords {\r\n\t\t\t\tid\r\n\t\t\t\ttitle\r\n\t\t\t\tdescription\r\n\t\t\t\tcompleted\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;","import { getComponent, useNavigation } from '@bluebase/core';\r\nimport { JsonGraphqlFormProps } from '@bluebase/plugin-json-graphql-components';\r\nimport React, { useCallback } from 'react';\r\n\r\nimport { CreateTaskMutationMutationVariables, TasksInsertInput } from '../../graphql-types';\r\nimport { CreateTaskMutation } from './CreateTaskMutation.graphql';\r\n\r\nconst JsonGraphqlForm = getComponent<JsonGraphqlFormProps<TasksInsertInput>>('JsonGraphqlForm');\r\n\r\nexport interface CreateTaskFormProps {}\r\n\r\nexport const CreateTaskForm = (props: CreateTaskFormProps) => {\r\n\tconst { navigate } = useNavigation();\r\n\r\n\tconst onSuccess = useCallback(() => {\r\n\t\tnavigate('TasksApp');\r\n\t}, []);\r\n\r\n\tconst mapFormValuesToMutationVariables = useCallback(\r\n\t\t(task: TasksInsertInput): CreateTaskMutationMutationVariables => {\r\n\t\t\treturn { tasks: [task] };\r\n\t\t}, []);\r\n\r\n\treturn (\r\n\t\t<JsonGraphqlForm\r\n\t\t\tmutation={{\r\n\t\t\t\tmutation: CreateTaskMutation\r\n\t\t\t}}\r\n\t\t\tonSuccess={onSuccess}\r\n\t\t\tmapFormValuesToMutationVariables={mapFormValuesToMutationVariables}\r\n\t\t\t{...props}\r\n\t\t\tschema={{\r\n\t\t\t\tvalidateOnBlur: false,\r\n\t\t\t\tvalidateOnChange: false,\r\n\r\n\t\t\t\tfields: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tautoFocus: true,\r\n\t\t\t\t\t\tlabel: 'Title',\r\n\t\t\t\t\t\tname: 'title',\r\n\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Description',\r\n\t\t\t\t\t\tname: 'description',\r\n\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'Completed',\r\n\t\t\t\t\t\tname: 'completed',\r\n\t\t\t\t\t\ttype: 'checkbox',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'status',\r\n\t\t\t\t\t\ttype: 'status',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfullWidth: true,\r\n\t\t\t\t\t\tname: 'submit',\r\n\t\t\t\t\t\ttitle: 'Create Task',\r\n\t\t\t\t\t\ttype: 'submit',\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nCreateTaskForm.displayName = 'CreateTaskForm';","export * from './CreateTaskForm';\r\n\r\nimport { CreateTaskForm } from './CreateTaskForm';\r\nexport default CreateTaskForm;","import React from 'react';\r\n\r\nimport CreateTaskForm from '../../components/CreateTaskForm';\r\n\r\nexport const CreateTaskScreen = () => {\r\n\treturn (\r\n\t\t<CreateTaskForm />\r\n\t);\r\n};\r\n\r\nCreateTaskScreen.displayName = 'CreateTaskScreen';","export * from './CreateTaskScreen';\r\n\r\nimport { CreateTaskScreen } from './CreateTaskScreen';\r\nexport default CreateTaskScreen;","import React from 'react';\r\n\r\nimport TaskList from '../../components/TaskList';\r\n\r\nexport const CompletedTasksScreen = () => {\r\n\treturn (\r\n\t\t<TaskList completed />\r\n\t);\r\n};\r\n\r\nCompletedTasksScreen.displayName = 'CompletedTasksScreen';","export * from './CompletedTasksScreen';\r\n\r\nimport { CompletedTasksScreen } from './CompletedTasksScreen';\r\nexport default CompletedTasksScreen;","import { EditTaskScreen } from './EditTaskScreen';\r\nimport { PendingTasksScreen } from './PendingTasksScreen';\r\nimport { CreateTaskScreen } from \"./CreateTaskScreen\";\r\nimport { CompletedTasksScreen } from \"./CompletedTasksScreen\";\r\n\r\nexport const screens = {\r\n\tPendingTasksScreen,\r\n\tEditTaskScreen,\r\n\tCreateTaskScreen,\r\n\tCompletedTasksScreen\r\n};","import { IntlMessages } from '@bluebase/core';\r\n\r\nexport const ur = (messages: IntlMessages) => ({\r\n\t...messages,\r\n\r\n\t'Title': 'عنوان',\r\n\t'Description': 'تفصیل',\r\n\t'Pending': 'زیر التواء',\r\n\t'Completed': 'مکمل',\r\n\r\n\t'Tasks': 'کام',\r\n\t'My Tasks': 'میری ٹاسکس',\r\n\t'No tasks': 'کوئی کام نہیں',\r\n\t'Start by creating a new task': 'ایک نیا کام بنا کر شروع کریں۔',\r\n\t'Create Task': 'ٹاسک بنائیں',\r\n\t'Edit Task': 'ٹاسک ترمیم کریں',\r\n\t'Update Task': 'ٹاسک تدوین کریں',\r\n});\r\n\r\nexport default ur;","import { ur } from './ur';\r\n\r\nexport const lang = {\r\n\t'bluebase.intl.messages.ur': ur,\r\n};","import { createPlugin } from '@bluebase/core';\r\n\r\nimport { ToDoAppIcon } from './components/ToDoAppIcon';\r\nimport { routes } from './routes';\r\nimport { screens } from './screens';\r\nimport { lang } from './lang';\r\nimport { filters } from './filter';\r\n\r\n// Plug-ins\r\nexport default createPlugin({\r\n\tkey: 'tasks',\r\n\tname: 'Tasks',\r\n\tdescription: 'A todo app made with BlueBase framework.',\r\n\r\n\t// For Settings & Configuration\r\n\t// defaultConfigs: {\r\n\t// \t'tasks.itemsPerPage': 10,\r\n\t// },\r\n\r\n\t// For Theming\r\n\t// assets: {\r\n\t// \tNoTasks: require('../assets/no-tasks-light.png'),\r\n\t// },\r\n\tassets: {\r\n\t\tNoTasks_dark: require('../assets/no-tasks-dark.png'),\r\n\t\tNoTasks_light: require('../assets/no-tasks-light.png'),\r\n\t},\r\n\r\n\t// For Language & Filters\r\n\t// filters: {\r\n\t// \t...lang,\r\n\t// },\r\n\tfilters: {\r\n\t\t// ...filters,\r\n\t\t...lang,\r\n\t},\r\n\r\n\tcomponents: {\r\n\t\t// Components\r\n\t\tToDoAppIcon,\r\n\r\n\t\t// Screens\r\n\t\t...screens,\r\n\t},\r\n\r\n\ticon: {\r\n\t\tcomponent: 'ToDoAppIcon',\r\n\t\ttype: 'component',\r\n\t},\r\n\r\n\tindexRoute: 'TasksApp',\r\n\r\n\troutes,\r\n});\r\n","import BlueBasePluginApollo from '@bluebase/plugin-apollo';\r\nimport BlueBasePluginJsonGraphqlComponents from '@bluebase/plugin-json-graphql-components';\r\nimport BlueBasePluginJsonSchemaComponents from '@bluebase/plugin-json-schema-components';\r\nimport BlueBasePluginLauncher from '@bluebase/plugin-launcher';\r\nimport BlueBasePluginMaterialUI from '@bluebase/plugin-material-ui';\r\nimport BlueBasePluginReactRouter from '@bluebase/plugin-react-router';\r\nimport BlueBasePluginResponsiveGrid from '@bluebase/plugin-responsive-grid';\r\nimport BlueBasePluginSettingsApp from '@bluebase/plugin-settings-app';\r\nimport { MaterialCommunityIcons } from '@bluebase/plugin-vector-icons';\r\nimport BlueBasePlaceholder from '@bluebase/plugin-rn-placeholder';\r\n\r\nimport Plugin from './src';\r\n\r\nexport const plugins = [\r\n\tBlueBasePluginApollo,\r\n\tBlueBasePluginJsonGraphqlComponents,\r\n\tBlueBasePluginJsonSchemaComponents,\r\n\tBlueBasePluginLauncher,\r\n\tBlueBasePluginMaterialUI,\r\n\tBlueBasePluginReactRouter,\r\n\tBlueBasePluginResponsiveGrid,\r\n\tMaterialCommunityIcons,\r\n\tBlueBasePluginSettingsApp,\r\n\r\n\tPlugin,\r\n\tBlueBasePlaceholder\r\n];\r\n","import 'react-native-gesture-handler';\n\nimport { BlueBaseApp } from '@bluebase/core';\nimport React from 'react';\n\nimport { configs } from './configs';\nimport { plugins } from './plugins';\n\nexport default function App() {\n\treturn (\n\t\t<BlueBaseApp configs={configs} plugins={plugins} />\n\t);\n}\n"],"sourceRoot":""}